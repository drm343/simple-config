#!/usr/bin/env bash
PACKAGE=/var/log/packages

help-this () {
echo $0
echo "find: search package"
echo "check: search and read content from a package"
echo "remove: remove select package"
echo "all: pass all installed packages as parameter for other command"
echo "requires: setup sbo require source packages"
echo "download: download sbo source package"
echo "build: build sbo package"
echo "install: install sbo package"
echo "version: check sbo package version"
}

eslackpkg-remove () {
    # remove "remove" from parameter
    shift

    select-then-remove () {
        local result=`ls $PACKAGE | fzf`
        if [ ! -z "$result" ]; then
            sudo removepkg $result
        fi
    }

    remove-current () {
        local result=`ls ./*t?z`

        if [ ! -z "$result" ]; then
            sudo removepkg $result
        fi
    }

    case $1 in
        "current")
            remove-current
            ;;
        "select")
            select-then-remove
            ;;
        *)
            echo "select: select a installed package and remove"
            echo "current: remove all package in this directory"
            ;;
    esac
}


eslackpkg-download () {
local file_url=`cat ./*.info | fzf | sed "s/^.*=//" | tr -d "\""`
local file_name=`basename $file_url`
curl -L $file_url --output $file_name
}


eslackpkg-version () {
    shift

    case $1 in
        "current")
            local PACKAGE=`find . -name "*_SBo.t?z"`
            ;;
        "select")
            local FULL_PATH=$(find /var/log/packages/ -name '*SBo' | fzf)
            local PACKAGE=$(basename $FULL_PATH)
            ;;
        *)
            echo "current: check current package version in this directory"
            echo "select: select package and check version"
            return 1
            ;;
    esac

    IFS="-" command eval 'LINE=($(echo $PACKAGE))'
    for i in ${LINE[@]};
    do
        if is version $i;
        then
            VERSION="$i"
            break
        else
            if is empty $PACKAGE_NAME;
            then
                PACKAGE_NAME="$i"
            else
                PACKAGE_NAME="$PACKAGE_NAME-$i"
            fi
        fi
    done

    echo $PACKAGE_NAME
    case $1 in
        "current")
            local info_path="./*.info"
            ;;
        "select")
            local info_path="`find /opt/Program/ -name $PACKAGE_NAME`/*.info"
            ;;
    esac

    local package_version=`egrep -i "VERSION" $info_path \
        | sed "s/VERSION=\"\(.*\)\"/\1/"`

    echo $VERSION
    echo $package_version
}


eslackpkg-set-requires () {
local require_packages=`egrep -i "Requires" ./*.info | sed "s/REQUIRES=\"\(.*\)\"/\1/"`
for package in $require_packages;
do
    command pushd `find ../.. -name "$package"` > /dev/null
    eslackpkg-set-requires
done
}


passing=""
for i in $@;
do
    result=`echo $i | grep "="`
    if [ ! -z "$result" ]; then
        passing+="$result "
    fi
done


case $1 in
    "find")
        ls $PACKAGE | fzf
        ;;
    "check")
        vim -m `ls $PACKAGE/* | fzf`
        ;;
    "remove")
        eslackpkg-remove $@
        ;;
    "all")
        find $PACKAGE/*
        ;;
    "requires")
        eslackpkg-set-requires
        dirs -v
        ;;
    "download")
        eslackpkg-download
        ;;
    "build")
        USER=`whoami`
        OUTPUT=$HOME/Software/queue/$(basename `pwd`)
        sudo $passing TMP=$OUTPUT/SBo OUTPUT=$OUTPUT sh `ls *SlackBuild`
        sudo chown $USER:users $OUTPUT
        ;;
    "install")
        sudo upgradepkg --install-new ./*.t?z
        ;;
    "help")
        help-this $0
        ;;
    "version")
        eslackpkg-version $@
        ;;
    *)
        help-this $0
        ;;
esac
