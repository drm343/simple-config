===============================================================================
=                      歡迎使用 simple-config                                 =
===============================================================================
     打開此文件的人，相信已經使用過教學模式了，這份文件進一步解釋選單中預
     設的各種模式，並且第一章會介紹一些本設定檔使用的指令或設定，非 bash
     內建功能，而是透過使用者開發擴充的部份，會放到第二章之後做介紹。

     本文預設使用者會 vim 的基本操作。



~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
            == 目錄 ==

            [[#第一章︰預備知識]]
            [[#第一章第一節︰預設編輯器]]

            [[#第二章︰切換目錄]]
            [[#第二章第一節︰從 HOME 往下移動]]
            [[#第二章第二節︰從當前目錄往下移動]]
            [[#第二章第三節︰互動式 cd - ecd]]

            [[#第三章︰vim 套件管理]]
            [[#第三章第一節︰安裝新套件]]
            [[#第三章第二節︰安裝新套件]]
            [[#第三章第三節︰更新新套件]]
            [[#第三章第四節︰移除套件]]
            [[#第三章第五節︰更新套件管理工具]]

            [[#第四章︰其他]]
            [[#第四章第一節︰載入新設定]]


~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
            == 第一章︰預備知識 ==

     這邊會簡單介紹一些 bash 的功能，也會介紹一些 bash 以外工具的知識。


     [[#目錄|返回目錄]]


~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
            === 第一章第一節︰預設編輯器與按鍵 ===

     想像一下下面兩個狀況，指令打錯了，要整個重打很累吧，就算用 history 的
     方式把指令拉回來，重新編輯還是頗麻煩的，這時候可以試試看 fc 這個傳統
     工具，這個工具會把上一個指令放到編輯器中讓使用者編輯，完成後直接儲存
     再離開編輯器，就會直接執行了。

  1. 在 Bash 中執行錯誤的指令例如 ehco somthing

  2. 執行 fc 會打開編輯器，將 ehco 修改成 echo 後儲存關閉檔案

  3. 正確的命令將直接執行並顯示結果

     或者指令會打得很長，可能需要靠 \ 來分行，讓指令比較好看好寫，但其實不
     用 \ 也沒問題，Bash 本身就可以靠 Command Line Editing 的方式打開編輯
     器寫長指令。

  1. 在 Bash 中按下 Esc 切換到 vi-normal mode，然後按下 v

  2. 此時 Bash 會打開編輯器，隨便輸入一個指令，然後儲存檔案並且關閉

  3. 命令將直接執行並顯示結果

     Bash 可以透過 EDITOR 這個變數指定編輯器，設定成 vim 或自己喜歡的編輯
     器，如果是 debian  系的 distro，則會使用 /etc/alternatives 的方式自動
     設定，不過一但安裝了新編輯器，可能導致預設編輯器被替換，因此有強制設
     定該變數。

     關於 Command Line Editing 這個功能，需要安裝 Readline 才能正常運作，
     而且 Readine 預設的按鍵是 Emacs-style，這代表必須用 Emacs-style 的按
     鍵才能在 Bash 中做複製、貼上、移動光標這些動作，本文假設使用者使用的
     預設編輯器是 vim，並且已經知道基本的操作方式，因此已經將按鍵綁定方式
     改為 vim 了，進入 shell 時的預設模式是 vi-insert mode ，這代表使用者
     一啟動 Bash 就可以像過去一樣直接輸入指令，然後使用 Esc 切換為另一個模
     式 vi-normal mode，此時可以像操作 vi 一樣使用 jk 切換歷史指令，hl 移
     動光標，dd 刪掉整行，yy 複製整行，要切回去 vi-insert mode 也只要使用
     i 直接從光標位置開始修改，或是 a 移動到最後面開始修改，前面也有提過使
     用 v 這個按鍵直接從 vi-normal mode 進入編輯器中編輯指令然後執行。


     [[#目錄|返回目錄]]


~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
            == 第二章︰切換目錄 ==

     暫時還沒開始做這些操作跟介紹的教學互動模式，因此先寫文件，後續還在修
     本章


     [[#目錄|返回目錄]]


~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
            === 第二章第一節︰從 HOME 往下移動 ===

  1. 使用 m 指令打開選單。

  2. 選擇 cd-home，會開始搜尋 $HOME 下的目錄。

  3. 選擇想開啟的目錄後，會移動到該目錄。


     [[#目錄|返回目錄]]


~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
            === 第二章第二節︰從當前目錄往下移動 ===

  1. 使用 m 指令打開選單。

  2. 選擇 cd-pwd，會開始搜尋 pwd 下的目錄。

  3. 選擇想開啟的目錄後，會移動到該目錄。


     [[#目錄|返回目錄]]


~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
            === 第二章第三節︰互動式 cd - ecd ===

  1. 輸入 ecd 可以打開 fzf 版 cd 指令。

  2. 使用上下鍵選擇想移動的目錄，按下 Enter 就會跳到選擇的新目錄中。

  3. 移動到目標目錄後，按下 Esc 或是選到 . 並按下 Enter，就會退出程式，並
     且切換到目標目錄。


     [[#目錄|返回目錄]]


~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
            == 第三章︰vim 套件管理 ==

     使用者可以直接從 Bash 管理 vim 套件。


     [[#目錄|返回目錄]]


~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
            === 第三章第一節︰進入 vim plugin mode ===

     本章完成後不會退出 vim-plugin-mode，必須執行 exit 才會離開。

  1. 使用 m 指令打開選單。

  2. 選擇 vim-plugin-mode 進入 vim-plugin-mode，直接輸入 exit 或打開
     選單後選擇 exit 即會離開 vim-plugin-mode。


     [[#目錄|返回目錄]]


~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
            === 第三章第二節︰安裝新套件 ===

  1. 使用 m 指令打開選單。

  2. 選擇 plugin-install，會打開 plugin 設定檔，設定完成後儲存關閉，就會自
     動安裝套件。


     [[#目錄|返回目錄]]


~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
            === 第三章第三節︰更新新套件 ===

  1. 使用 m 指令打開選單。

  2. 選擇 plugin-update，會直接更新已安裝的套件。


     [[#目錄|返回目錄]]


~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
            === 第三章第四節︰移除套件 ===

  1. 使用 m 指令打開選單。

  2. 選擇 plugin-clean，會打開 plugin 設定檔，設定完成後儲存關閉，就會自動
     安裝套件。


     [[#目錄|返回目錄]]


~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
            === 第三章第五節︰更新套件管理工具 ===

  1. 使用 m 指令打開選單。

  2. 選擇 upgrade，會更新 vim-plug，本章完成請離開 vim-plugin-mode。


     [[#目錄|返回目錄]]


~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
            == 第四章︰其他 ==
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
            === 第四章第一節︰載入新設定 ===

  1. 使用 m 指令打開選單。

  2. 選擇 reload-mode，會重新載入修改過的 bash 設定。


     [[#目錄|返回目錄]]


~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

     暫時還沒開始做這些操作跟介紹的教學互動模式，因此先寫文件，後續還在修
     改中，謝謝大家使用。


[[index-zh_TW|返回首頁]]
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
